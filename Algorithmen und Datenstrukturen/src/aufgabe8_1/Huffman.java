package aufgabe8_1;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;


public class Huffman {

    private int numberOfBitsWithHuffmann = 0;
    private int numberOfBitsWithoutHuffmann = 0;

    /**
     * Recursive function to print the huffman-code through the tree traversal.
     *
     * @param root - root node
     * @param code - generated huffman - code
     */
    public void printCode(HuffmanNode root, String code) {

        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code code generated by traversing the tree.
        if (root.getLeft() == null && root.getRight() == null) {

            // c is the character in the node
            System.out.println(root.getC() + ":" + code);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.getLeft(), code + "0");
        printCode(root.getRight(), code + "1");
    }

    /**
     * Counts the number for all characters.
     *
     * @return - Hashmap with occurring characters and their numbers
     */
    public HashMap<Character, Counter> count() {
        BufferedReader buff = null;
        HashMap<Character, Counter> characters = new HashMap<>();
        try {
            String filename = "data/KHR95_red.txt";
            char fileContent;
            int codiert = 0;

            buff = new BufferedReader(new FileReader(filename));

            while (codiert != -1) {
                codiert = buff.read();
                if (codiert != -1) {
                    fileContent = (char) codiert;
                    Counter count = characters.get(fileContent);
                    if (count == null) {
                        characters.put(fileContent, new Counter());
                    } else {
                        count.increment();
                    }
                }
            }
            return characters;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (buff != null) {
                    buff.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    /**
     * Counts the bits needed for the characters with the huffman - code.
     *
     * @param root       - root node
     * @param characters - occurring characters and their numbers
     * @param code       - generated huffman - code
     */
    public void getBitsWithHuffmann(HuffmanNode root, HashMap<Character, Counter> characters, String code) {

        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code code generated by traversing the tree.
        if (root.getLeft() == null && root.getRight() == null) {
            numberOfBitsWithHuffmann += characters.get(root.getC()).get() * code.length();
            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        getBitsWithHuffmann(root.getLeft(), characters, code + "0");
        getBitsWithHuffmann(root.getRight(), characters, code + "1");
    }

    /**
     * Counts the bits needed for the characters without the huffman - code.
     * @param characters - occurring characters and their numbers
     */
    public void getBitsWithoutHuffmann(HashMap<Character, Counter> characters){
        for (Map.Entry<Character, Counter> entry : characters.entrySet()) {
            numberOfBitsWithoutHuffmann += entry.getValue().get() * 8 ;
        }
    }

    public int getNumberOfBitsWithHuffmann() {
        return numberOfBitsWithHuffmann;
    }

    public void setNumberOfBitsWithHuffmann(int numberOfBitsWithHuffmann) {
        this.numberOfBitsWithHuffmann = numberOfBitsWithHuffmann;
    }

    public int getNumberOfBitsWithoutHuffmann() {
        return numberOfBitsWithoutHuffmann;
    }

    public void setNumberOfBitsWithoutHuffmann(int numberOfBitsWithoutHuffmann) {
        this.numberOfBitsWithoutHuffmann = numberOfBitsWithoutHuffmann;
    }
}
